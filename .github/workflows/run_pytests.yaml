name: paquo ci

on: [push, pull_request]

jobs:
  # RUN PYTEST ON PAQUO SOURCE
  tests:
    name: pytest ${{ matrix.os }}::py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v1
    - name: Make python reference python3 because conda-devenv needs it
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Create the environment.yml via conda-devenv
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        python -m pip install git+https://github.com/ESSS/conda-devenv.git@2.1.1
        python -m conda_devenv.devenv --env PAQUO_DEVEL=TRUE --file environment.devenv.yml --print > environment.yml
    - name: Cache conda
      uses: actions/cache@v1
      env:
        # Increase this value to reset cache if etc/example-environment.yml has not changed
        CACHE_NUMBER: 1
      with:
        path: ~/conda_pkgs_dir
        key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
    - name: Setup conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        environment-file: environment.yml
        python-version: ${{ matrix.python-version }}
        auto-update-conda: true
        activate-environment: paquo
        use-only-tar-bz2: true
        auto-activate-base: false
    - name: Test with pytest (windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        conda info
        conda list
        PYTEST_DEBUG=1 pytest
    - name: Test with pytest (unix)
      if: matrix.os != 'windows-latest'
      shell: bash -l {0}
      run: |
        conda info
        conda list
        PYTEST_DEBUG=1 pytest
    - shell: bash -l {0}
      if: ${{ failure() }}
      name: show java error log
      run: |
        echo "########### ERROR LOG ##############"
        cat hs_err_*.log
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v1
    #   with:
    #     name: paquo

  # RUN MYPY STATIC TYPE ANALYSIS ON PAQUO SOURCE
  typing:
    name: mypy type analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools
          pip install -e .[dev]
      - name: Run mypy
        run: |
          mypy paquo

  # DEPLOY PAQUO TO TEST.PYPI ON SUCCESS
  testdeploy:
    needs: [tests, typing]
    name: deploy to test.pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Install pep517
        run: >-
          python -m
          pip install
          pep517
          --user
      # we'll have to remove local_scheme for pushes to test.pypi pep440
      - name: Get version without local_scheme
        id: non_local_version
        run: |
          python setup.py --version | awk -F+ '{print "::set-output name=version::"$1}'
      - name: Build a binary wheel and a source tarball
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ steps.non_local_version.outputs.version }}
        run: >-
          python -m
          pep517.build
          --source
          --binary
          --out-dir dist/
          .
      # push all versions on master to test.pypi.org
      - name: Publish package to TestPyPI
        continue-on-error: true
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/

  # DEPLOY PAQUO TO PYPI ON SUCCESS
  deploy:
    needs: [tests, typing]
    name: deploy to pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Install pep517
        run: >-
          python -m
          pip install
          pep517
          --user
      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          pep517.build
          --source
          --binary
          --out-dir dist/
          .
      # push all tagged versions to pypi.org
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
